#include "ctorgame.h"
#include "board.h"
#include <string>
#include <iostream>
#include <vector>
#include <fstream>
using namespace std;


CtorGame::CtorGame() {}

void CtorGame::setFile( string file){ this->file = file; }
void CtorGame::setSeed(int seed){ this->seed = seed; }
void CtorGame::setLoad(bool load){ this->load = load; }
void CtorGame::setBoard(bool boardGiven){ this->boardGiven = boardGiven; }
void CtorGame::setRandBoard(bool randBoard){ this->randBoard = randBoard; }
void CtorGame::setCustomized(bool customized){ this->customized = customized; }

// helper when ask user to input a non-negative integer, return -1 when EOF, return -2 when invalid value
int askForInteger(int up = 1000000, int lb = 0) { // 
    cin.exceptions(ios::eofbit|ios::failbit);
    int pos = -2;  
    try { 
        cin >> pos;
        if ((pos >= lb) && (pos <= up)) return pos;
        cerr << ">  Invalid value: index out of range!" << endl;
        return -2;
    }  
    catch (ios::failure &) {
        if (cin.eof())  return -1;
        cerr << ">  Invalid value: Only non-negative integer accept!" << endl;
        cin.clear();
        cin.ignore();
        return -2;
    }       
    return pos;
}
// helper when ask user to input a string command, return "eof" when EOF
string askForCommand() {
    cin.exceptions(ios::eofbit|ios::failbit);
    string cmd = "eof";
    while (true) {
        try { 
            cin >> cmd;  break;
        }  
        catch (ios::failure &) {
            if (cin.eof())  return "eof"; 
        }       
    }
    return cmd;
}
// End game and save all status in file backup.sv if fileName not provided
void CtorGame::endGame(Board & board, string fileName){ 
    string out = board.saveGame(); 
    ofstream fileOut{fileName}; 
    fileOut << out << endl; 
    cout << ">  Saved in "<< fileName << " !" << endl;
}

// set up the game: each builder chooce two location to build basement
int CtorGame::setUp(Board & board, const vector<string> &fourPlayers) {
    vector<int> sequence = {0,1,2,3,3,2,1,0};
    for (int i = 0; i < 8; i++) {
        cout << ">  Builder " << fourPlayers[sequence[i]] << ", where do you want to build a basement?" << endl;
        bool built = false;
        while (!built) { 
            int pos = askForInteger(53);
            if ( pos == -1 ) { endGame(board); return -1;}      // eof 
            if ( pos != -2 ) { built = board.buildResFree(sequence[i], pos); } // not invalid index
        } 
    }
    return 0;
}


bool CtorGame::play() {
    Board board;
    if (load) {                             // given an exist game
        board.loadGame(file);
        cout  << ">  Generate an exist game by loading the state saved in " << file << endl;
    } else if (boardGiven) {                // given board
        bool valid = board.initLoadBoard(file);
        if (!valid) {return 0;}
        cout  << ">  Generated by a new game with board given in " << file << endl;
    } else if (randBoard && (seed != -1)) { // given seed
        board.initSeedBoard(seed);
    } else if (randBoard) {                 // not given seed 
        board.initRandBoard();
        cout  << ">  Generate a new game randomly" << endl;
    } else {
        board.initLoadBoard(file);          // using default file "layout.txt"
        cout  << ">  Generate a new game by the default board" << endl;
    }
    if (seed != -1) {
        cout  << ">  Seed for random number generator is " << seed << endl;
    }

    if (customized) {
        cout << ">  Customize the Game: " << endl;
        cout << ">  Enter building points to win the game: (integer between 3-15)" << endl;
        while (true) {
            int points = askForInteger(15,3);
            if (points == -1) {return 0;}
            if (points != -2) {board.setWinPoints(points); break;}
        }
        string choice;
        cout << ">  Do you want to have geese in the game? (yes/no)" << endl;
        while (true) {
            choice = askForCommand();
            if (choice == "eof") return 0;  
            if (choice == "yes") {
                haveGeese = true; break;
            } else if (choice == "no") {
                haveGeese = false; break;
            } else { 
                cout << ">  Please enter either: 'yes' or 'no'" << endl;
            }
        }
        cout << ">  Do you want to get building suggestions in each turn? (yes/no)" << endl;
        while (true) {
            choice = askForCommand();
            if (choice == "eof") return 0;  
            if (choice == "yes") {
                suggestion = true; break;
            } else if (choice == "no") {
                suggestion = false; break;
            } else { 
                cout << ">  Please enter either: 'yes' or 'no'" << endl;
            }
        }
        cout << ">  Completed!" << endl;
    }

    board.printBoard();
    vector<string> fourPlayers = {"Blue", "Red", "Orange", "Yellow"};
    if (!load) {                                            // each builder chooce two location to build basement
        cout << ">  Seting up game..." << endl;
        if (setUp(board, fourPlayers) == -1) return 0;      // eof
        board.printBoard();
    }

    cout << ">  Start!" << endl;
    int numPlayer = 4;
    vector<bool> fairOrLoad(numPlayer,0);                   // remember dice mode for each player
    while (true) {
        int curTurn = board.getCurTurn();
        cout << ">  Builder " << fourPlayers[curTurn] << "'s turn." << endl;
        string cmd;  
        // roll dice 
        bool rolled = false;    
        int dice = -2;
        while (true) {
            if (rolled) break;                      // if not rolled yet, then ask for commands and roll
            cmd = askForCommand();
            if (cmd == "eof") {endGame(board); return 0;}

            if (cmd == "roll") {
                if (!fairOrLoad[curTurn]) {         // load dice
                    cout << ">  Input the sum of two dices, value between 2 to 12 (inclusive):"<< endl;
                    while (true) {            // -2 when invalid dice number provided
                        dice = askForInteger(12,2);
                        if (dice == -1) { endGame(board); return 0;}
                        if (dice != -2) break;
                        cout << ">  Please re-enter the dice value: integer between 2-12 (inclusive)" << endl;
                    }
                    board.rollDice(dice);
                } else {                            // fair dice
                    dice = board.rollDice();
                }
                rolled = true; 
            } else if (cmd == "fair") {             // set current player's dice to be fair 
                fairOrLoad[curTurn] = true;
                board.setDice(true);
                cout<< ">  Player " << fourPlayers[curTurn] << " uses fair dice now" << endl;
            } else if (cmd == "load") {             // set current player's dice to be load
                fairOrLoad[curTurn] = false;
                board.setDice(false);
                cout<< ">  Player " << fourPlayers[curTurn] << " uses loaded dice now" << endl;
            } else if (cmd == "save") {
                string fileName = askForCommand();
                if (fileName == "eof") {endGame(board); return 0;} 
                endGame(board,fileName); 
                return 0;
            } else if (cmd == "quit") {
                cout << ">  Quit the game." << endl;
                return 0;
            } else {
                cerr << ">  Please first roll the Dice. Remember to enter 'fair' or 'load' when needed" << endl;
            } 
        }
        cout << ">  You have rolled: " << dice << endl; 
        if (dice != 7) {                            // obtaining resources
            board.gainResources(dice); 
        } else if (haveGeese && (dice == 7)) {      // move geese
            cout<<">  Geese attack!"<<endl;
            board.loseHalf();                       // builder more than 10 resources lose half
            cout << ">  Choose where to place the Geese. They are on tile ";
            cout << board.getGeese() << " now." << endl;
            while (true) {
                int pos = askForInteger(18);        
                if (pos == -1) { endGame(board); return 0;}
                if (pos != -2) {                    // -2 when invalid index given
                    if (pos == board.getGeese()) {
                        cout << ">  Geese should be moved to the tile not previously on." << endl;
                    } else {
                        int eofVal = board.moveGeese(pos);
                        if (eofVal == -1) { endGame(board); return 0;}
                        break;
                    }
                }
            } 
        }
        if (suggestion) board.printUsingChoice();
        // during the turn 
        while (true) {
            bool built = false;
            cmd = askForCommand();
            if (cmd == "eof") {endGame(board); return 0;}

            if (cmd == "help") {
                cout << ">  Valid commands:" << endl;
                cout << ">    board" << endl;
                cout << ">    status" << endl;
                cout << ">    residences" << endl;
                cout << ">    build-road <edge#>    e.g. build-road 7"<< endl;
                cout << ">    build-res <housing#>    e.g. build-res 25" << endl;
                cout << ">    improve <housing#>    e.g. improve 25"<< endl;
                cout << ">    trade <colour> <give> <take>    Note: make sure the first letter is capitalized: trade Orange Brick HEAT" << endl;
                cout << ">    next" << endl;
                cout << ">    save <file>    e.g. save backup.sv" << endl;
                cout << ">    help" << endl;
            } 
            else if (cmd == "board") { 
                board.printBoard();
            } 
            else if (cmd == "status") { 
                board.printAllPlayerStatus();
            } 
            else if (cmd == "residences") { 
                board.printCurPlayerRes();
            } 
            else if (cmd == "build-road") {
                int pos = askForInteger(71);
                if (pos == -1) {endGame(board); return 0;}
                if (pos != -2) {                    // -2 when invalid index given
                    built = board.buildRoad(pos);
                    if (built) cout << ">  Player " << fourPlayers[curTurn] << " built road "<< pos << endl;
                }
                
            } 
            else if (cmd == "build-res") {
                int pos = askForInteger(53);
                if (pos == -1) {endGame(board); return 0;}
                if (pos != -2) {                    // -2 when invalid index given
                    built = board.buildRes(pos);
                    if (built) cout << ">  Player " << fourPlayers[curTurn] << " built Basement "<< pos << endl;
                }
                 
            } 
            else if (cmd == "improve") {
                int pos = askForInteger(53);
                if (pos == -1) {endGame(board); return 0;}
                if (pos != -2) {                    // -2 when invalid index given
                    built = board.improveRes(pos); 
                    if (built) cout << ">  Player " << fourPlayers[curTurn] << " improved residence "<< pos << endl;
                }
            } 
            else if (cmd == "trade") { 
                string colour = askForCommand();
                string give = askForCommand();
                string take = askForCommand();
                if ((colour == "eof") || (give == "eof") || (take == "eof")) {
                    endGame(board); return 0;
                }
                int pos = board.trade(colour,give,take);
                if (pos == -1) {endGame(board); return 0;}
            } 
            else if (cmd == "next") {
                break;
            } 
            else if (cmd == "save") {
                string fileName = askForCommand();
                if (fileName == "eof") {endGame(board); return 0;} 
                endGame(board,fileName); 
                return 0;
            } 
            else if (cmd == "suggestion") {
                board.printUsingChoice();
            }
            else if (cmd == "quit") {
                cout << ">  Quit the game." << endl;
                return 0;
            }
            else {
                cerr << ">  Error: " << cmd << ": command not found! ";
                cerr << "Using command 'help' to check all commands." << endl;
            } 

            bool won = board.checkWon();
            if (won) {
                cout << ">  Builder " << fourPlayers[board.getCurTurn()] << " won the game!" << endl;
                cout << ">  Would you like to play again? (yes/no)" << endl;
                string yesOrNo = askForCommand();
                if (yesOrNo == "yes") return 1;
                if (yesOrNo == "eof") {endGame(board); return 0;} 
                if (yesOrNo == "no") return 0;
            }
        } 
        board.endCurTurn();
    }
    return 0;
}
